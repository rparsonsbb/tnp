pool:
  vmImage: 'windows-latest'
  
variables:
  buildConfiguration: 'Release'
  
steps:
- task: UseGitVersion@5
  displayName: gitversion
  inputs:
    versionSpec: '5.x.x'
    includePrerelease: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      
      dir env:
      $env:GITVERSION_NUGETVERSION
      echo "GITVERSION_NUGETVERSION is $env:GITVERSION_NUGETVERSION"
      echo "##vso[task.setvariable variable=NUGETVERSION]$env:GITVERSION_NUGETVERSION"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      
      echo "GITVERSION_NUGETVERSION is $env:GITVERSION_NUGETVERSION"

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      
      echo "ADO NUGETVERSION is $(NUGETVERSION)"

- task: MSBuild@1
  inputs:
    solution: '**/*.sln'
    configuration: 'Release'

- task: NuGetCommand@2
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    configuration: '$(buildConfiguration)'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'NUGETVERSION'

- task: NuGetCommand@2
  displayName: 'nuget push'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'cf61c30c-9ea8-4bae-9dcf-69884ce295e4/855ad5a6-cda7-4907-8473-6f728da43d5e'
    allowPackageConflicts: true
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))